"------------------------------------------------------------------------------
" => Plugins - Managed by junegunn/vim-plug
"------------------------------------------------------------------------------

" Make sure you use single quotes
call plug#begin('~/.vim/plugged')
" Default behaviour confituration
Plug 'editorconfig/editorconfig-vim'
Plug 'tpope/vim-sensible'

" UI enhance
Plug 'airblade/vim-gitgutter'
Plug 'scrooloose/nerdtree'
Plug 'vim-airline/vim-airline'

" Finding & Searching
Plug 'ctrlpvim/ctrlp.vim'

" Motion
Plug 'easymotion/vim-easymotion'
Plug 'terryma/vim-multiple-cursors'

" Linting & Completion
Plug 'Valloric/YouCompleteMe', { 'do': './install.py --go-completer' }
Plug 'w0rp/ale'

" Language packs
Plug 'darthmall/vim-vue'
Plug 'fatih/vim-go' " Need to run :GoInstallBinaries
Plug 'leafgarland/typescript-vim'
Plug 'mxw/vim-jsx'
Plug 'pangloss/vim-javascript'
call plug#end()

"------------------------------------------------------------------------------
" => Plugin configs
"------------------------------------------------------------------------------

" NERDTree options
let g:NERDTreeCaseSensitiveSort = 1
let g:NERDTreeMinimalUI = 1
let g:NERDTreeShowHidden = 1
let g:NERDTreeIgnore = [
  \ '\.git$',
  \ '\.pyc$',
  \ '\~$',
  \ '__pycache__',
  \ 'node_modules',
  \ ]

" Open NERDTree when opening a dir
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

" Open NERDTree when opening nothing
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Close if the only file is NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg)
  exec 'autocmd FileType nerdtree highlight '. a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg
  exec 'autocmd FileType nerdtree syn match '. a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('css',       'Brown',    'none')
call NERDTreeHighlightFile('go',        'Magenta',  'none')
call NERDTreeHighlightFile('html',      'Brown',    'none')
call NERDTreeHighlightFile('js',        'Magenta',  'none')
call NERDTreeHighlightFile('json',      'Brown',    'none')
call NERDTreeHighlightFile('less',      'Magenta',  'none')
call NERDTreeHighlightFile('markdown',  'Brown',    'none')
call NERDTreeHighlightFile('md',        'Brown',    'none')
call NERDTreeHighlightFile('php',       'Magenta',  'none')
call NERDTreeHighlightFile('py',        'Magenta',  'none')
call NERDTreeHighlightFile('sh',        'Magenta',  'none')
call NERDTreeHighlightFile('ts',        'Magenta',  'none')
call NERDTreeHighlightFile('tsx',       'Magenta',  'none')
call NERDTreeHighlightFile('vue',       'Cyan',     'none')

" Ale linter
let g:ale_fixers = {
  \ 'javascript': 'prettier',
  \ 'typescript': 'prettier',
  \ }
let g:ale_javascript_prettier_use_local_config = 1
let g:ale_set_highlights = 0

" CtrlP
let g:ctrlp_cache_dir = $HOME.'/.vim/ctrlp-cache'
let g:ctrlp_clear_cache_on_exit = 1
let g:ctrlp_lazy_update = 0
let g:ctrlp_max_depth = 5
let g:ctrlp_reuse_window = 'netrw\|help\|quickfix'
let g:ctrlp_use_caching = 0
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.(git|hg|svn)|node_modules|env)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }

" Vim-airline
let g:airline#extensions#tabline#enabled = 1

" Vim-JavaScript
let g:javascript_plugin_jsdoc = 1

" Vim-JSX
let g:jsx_ext_required = 0

" YouCompleteMe
let g:ycm_key_invoke_completion = '<C-a>'
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
let g:ycm_enable_diagnostic_highlighting = 0
let g:ycm_global_ycm_extra_conf = '~/.vim/plugged/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_semantic_triggers = {
  \ 'typescript': '.',
  \ }

"------------------------------------------------------------------------------
" => Key mappings
"------------------------------------------------------------------------------

let mapleader = ','

" Grep search
nmap <leader>s :grep -EIinr --color=never '

" Toggle paste mode
nmap <leader>y :setlocal paste!<cr>

" Toggle CursorColumn
nmap <leader>hc :set cursorcolumn!<cr>

" Buffer operation
nmap <leader>c :bp<cr>:bd #<cr>
nmap <leader>q :q<cr>
nmap <leader>w :w<cr>
nmap <leader>r :e!<cr>

" Toggle Prompt
nmap <leader>p :pclose<CR>

" Plugin - NERDTree
nmap <leader>t :NERDTreeToggle<CR>
nmap <leader>f :NERDTreeFind<CR>

" Plugin - YouCompleteMe
nmap <leader>g :YcmCompleter GoTo<CR>

" Disable highlight
nmap <leader><cr> :set hlsearch!<cr>

" Smart way to move between windows
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

" Terminal
tmap <Esc> <C-\><C-n>

" easymotion search
nmap / <Plug>(easymotion-sn)

"------------------------------------------------------------------------------
" => Basic
"------------------------------------------------------------------------------

" Highlight cursor line
set cursorline

" End of line char
set fileformats=unix,mac,dos

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store

" Allow buffer switching without saving
set hidden

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Don't redraw while executing macros (good performance config)
set lazyredraw

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowritebackup
set noswapfile

"------------------------------------------------------------------------------
" => User interface, interaction
"------------------------------------------------------------------------------

" Theme
colorscheme peachpuff

" Enable mouse
set mouse=a

" Show matched brackets
set showmatch

" Scroll off screen of 5 lines
set scrolloff=5

" Display line number
set number

" Highlight problematic whitespace
set list
set listchars=tab:›\ ,trail:•,extends:#,nbsp:.

" No annoying sound on errors
set noerrorbells
set visualbell
set t_vb=
set tm=500

"------------------------------------------------------------------------------
" => Text, tab, spaces, indent
"------------------------------------------------------------------------------

" Use spaces instead of tabs
set expandtab

" Tab size
set tabstop=2

" How many spaces to use for each indent, 0 => tabstop
set shiftwidth=0

" Auto indent when starting a new line
set smartindent

" Linebreak on 500 characters
set linebreak
set textwidth=500

" Don't wrap line
set nowrap

"------------------------------------------------------------------------------
" => Editing mappings
"------------------------------------------------------------------------------

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite * :call DeleteTrailingWS()

" Return to last edit position when opening files
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

"------------------------------------------------------------------------------
" => The end
"------------------------------------------------------------------------------
